{
    "questoes": [{
            "num": 1,
            "pergunta": "Porque é necessário denormalizar as tabelas de dimensão num sistema de B.I e porque isto não fere a integridade referêncial do sistema. Porque normalizamos um sistema operacional tradicional. (SGBD)",
            "resposta": "Para otimizar as agregações, diminuindo o número de joins. Sistema de B.I é READ-ONLY em relação ao usuário. A normalização de um sistema tradicional é feita apra evitar que alguém esqueça de atualizar campos duplicados, normalizando evito duplicidades"
        }, {
            "num": 2,
            "pergunta": "Como é feita a persistência de hierarquias de clientes corporativos e atributos multivalorados em  bancos de dados relacionais ?",
            "resposta": "Através de uma tabela ponte"
        }, {
            "num": 3,
            "pergunta": "Cite alguns motivos pelos quais é difícil a persistência de dados de redes sociais em bancos de dados relacionais",
            "resposta": "Schema flexível - Schema dinâmico (Resolve com MongoDB). Difícil fazer consultas em relacionamento N:N com grandes carginalidades em um banco relacional: EX: 1° - Qual a distância que separa duas pessoas ? | 2° - Qual o maior conjunto onde todos se conhecem mutuamente ? | 3° - Existem BDs orientados a esse tipo de relacionamento chamados BDs orientados a grafos. Ex Neo4J"
        }, {
            "num": 4, 
            "pergunta": "Cite dois objetivos pelos quais bancos de dados semiestruturados são procurados pelas empresas nos dias atuais",
            "resposta": "Schema flexível e escalabilidade horizontal (Mais máquinas trabalho juntas)"
        }, {
            "num": 5,
            "pergunta": "Diferencie escalabilidade horizontal e vertical para bancos de dados. Explique",
            "resposta": "Horizontal: Várias máquinas commodity trabalhando com um banco de dados distribuido. Exemplos de uso: Facebook e Google; Vertical: Um servidor com CPU e memória principal único. Exemplo de uso: Mainframes de bancos"
        }, {
            "num": 6,
            "pergunta": "Bancos não relacionais são antigos, citando como exemplo IMS, da década de 60. Cite alguns motivos pelos quais bancos NoSQL ganharam destaque nos dias de hoje",
            "resposta": "1 - Opensource | 2 - Schema dinâmico | 3 - Escalabilidade horizontal | 4 - Atende necessidade específica"
        }, {
            "num": 7,
            "pergunta": "Cite algum significado atual para a sigla NoSQL. Dê quatro características que configuram estes bancos atualmente. Explique porque o termo não ajuda a definir o que estes bancos são de fato", 
            "resposta": "NoSQL: Not Only SQL | 1° - Opensource | 2° - Schema flexível | 3° - Escalabilidade horizontal |4° - Atende necessidade específica. O termo pode parecer negativo em um primeiro momento"
        }, {
            "num": 8,
            "pergunta": "O que Martin Fowler entende por impedance mismatch, no seu livro NoSQL Essencial. Exemplifique", 
            "resposta": "É a diferença entre as tuplas persistidas e objeto utilizado no desenvolvimento"
        }, {
            "num": 9,
            "pergunta": "O que é consistência eventual. Qual é uma tradução errada PT-BR que deve ser evitada.",
            "resposta": "É uma relaxação do ACID para obter maior disponibilidade. O que é gravado no nó primário, em instantes estará nos secundários. Cuidado que, eventualmente consistente em PT-BR pode significar Pode não ocorrer."
        }, {
            "num": 10,
            "pergunta": "Enuncie o teorema CAP.",
            "resposta": "Consistência, disponibilidade, particionamento não podem ocorrer ao mesmo tempo em um sistema distribuído. No máximo teremos dois dos três itens no mesmo momento."
        }, {
            "num": 11,
            "pergunta": "O que são BigTable e Dynamo e como o Apache Hadoop se relaciona com ambos.",
            "resposta": "BigTable (NoSQL da Google) e Dynamo (NoSQL da Amazon), são de código fechado. Apache Hadoop procurou criar uma infraestrutura para banco NoSQL em sistemas distribuídos."
        }, { 
            "num": 12,
            "pergunta": "Porque é difícil comparar bancos NoSQL entre si.",
            "resposta": "Atendem necessidades específicas"
        }, {
            "num": 13,
            "pergunta": "Dizemos que fazemos a modelagem no banco relacional Botton-Up e no MongoDB Top-Down. Explique","resposta": "MongoDB: São as aplicações que definem a collection Relacional: Precisa fazer a normalização 3° Forma Normal (3FN) para definir o objeto a ser utilizado na aplicação"
        }, {
            "num": 14,
            "pergunta": "O MongoDB 3.X não aceita transações, porém ele é muito utilizado. Em que cenários ele é competitivo e em quais ele não tem seu uso recomendado.",
            "resposta": "MongoDB 3.X é competitivo para aplicações específicas, e não é recomendável para sistemas genéricos e grandes, como por exemplo, sistemas de cartão de crédito)"
        }, {
            "num": 15,
            "pergunta": "Exemplifique o find_and_modify (PyMongo) ou findAndModify (MongoShell)",
            "resposta": "Como faço operações atômicas no MongoDB 3.X."
        }, {
            "num": 16,
            "pergunta": "Qual é a limitação do dicionário em Python e como é contornada quando implementamos um cliente MongoDB.",
            "resposta": "Em versões anteriores a 3.6 (Python) não mantém a ordem dos elementos em um dicionário, por isso, passo uma lista de tuplas para um comando de sort com chave composta. OBS: Versão 3.6 já tem a característica de manter a ordem."
        }, {
            "num": 17,
            "pergunta": "O que é um upsert.",
            "resposta": "É um update e insert. Se existe atualiza, se não existe, insere."
        }, {
            "num": 18,
            "pergunta": "Disserte sobre Schema Design no MongoDB.",
            "resposta": "Veja as cardinalidades presentes no MongoDB (1:1) Quando for grande ou muito acessado, modelo como dois documentos diferentes; Quando for pequeno e pouco acessado, inserir no documento funcional. | (1:N) Quando for grande ou muito acessado, modelo como dois documentos diferentes; Quando a cardinalidade é pequena | (N:N) Quando a cardinalidade é pequena pode-se imbutir nos dois lados"
        }, {
            "num": 19,
            "pergunta": "O que significa que o Aggregation Framework funciona como um pipeline.",
            "resposta": "A saída de uma etapa, é utilizada como entradada na etapa seguinte."
        }, {
            "num": 20,
            "pergunta": "O que é sharding no MongoDB. Isso pressupõe algum gargalo no banco de dados ?",
            "resposta": "É o particionamento horizontal de uma collection. Pressupõe um gargalo que o MongoS controla a entrada e saída."
        }, {
            "num": 21,
            "pergunta": "Cite duas vantagens de um banco de dados colunar para a gregações massivas de um sistema de B.I.",
            "resposta": "Só realiza a leitura das colunas que fazem parte da agregação. Pode ter indices nas colunas. Não precisa fazer a leitura de todo o registro, somente as colunas; Pode fazer índice por coluna; A compactação é melhor pois os dados são do mesmo tipo."
        }, {
            "num": 22,
            "pergunta": "Fale sobre as opções de persistência do Redis. O que significa In memory database.",
            "resposta": "O Redis possui três tipos de persistência: - Não persiste nada; - Você define o número de transações ou um tempo para fazer push da memória; - Gravo em um log toda transação. | Memory Database: O banco fica na memória."
        }, {
            "num": 23,
            "pergunta": "Qual é a grande desvantagem do MongoDB em relacionaç ao CouchDB. Explique",
            "resposta": "MongoDB, na versão 3.X não é ACID, portanto não tem transação. O CouchDB, apesar de ser mais lento, é ACID. Veja que, na versão 4.X o MongoDB tem suporte a transações ACID."
        }, {
            "num": 24,
            "pergunta": "No Redis, explique a vantagem de inserts TTL. Como é feito o namespace dos databases.",
            "resposta": "TTL = Time To Live, tem uma inserção com um tempo fixo de vida. Namespaces nos databases é: 0, 1, 2, 3, 4, [...]"
        }, {
            "num": 25,
            "pergunta": "No MongoDB qual é a função do _id, a vantagem da collection ser schema free. Descreva o erro comum de chave duplicada _id dada em aula.",
            "resposta": "A função do _id: Chave única do documento no cluster; Vantagem da collection ser schema free: Agilidade no desenvolvimento; Quando você lê um documento, ele virá com _id, se tentar gravar aquele documento irá dar exceção de chave duplicada."
        }, {
            "num": 26,
            "pergunta": "No MongoDB o que são upserts. O que são fire-and-forget functions e sua vantagem.",
            "resposta": "Upserts: É um update e insert. Se existe atualiza, se não existe, insere; Fire and Forget Manda gravar no nó primário, não espera a resposta. A vantagem é, muito mais rápido."
        }, {
            "num": 27,
            "pergunta": "No MongoDB exemplifique a vantagem de findOne. O que são hint e explain.",
            "resposta": "findOne: Descubro o primeiro documento segundo o critério no cluster. - hint: Sugere uma sequência de índices para a próxima query; - explain: Detalhamento da última query executada."
        }, {
            "num": 28, 
            "pergunta": "Explique o que significa ser Linearmente escalável no caso do Cassandra. Qual é a limitação deste NoSQL.",
            "resposta": "Se dobra o número, dobraremos a disponibilidade; A limitação do Cassandra é eventualmente consistente."
        }, {
            "num": 29,
            "pergunta": "O que é BASE e qual sua relação com ACID.",
            "resposta": "BASE é a relaxação do ACID, através da consistência eventual."
        }, {
            "num": 30,
            "pergunta": "Exemplifique uma situação onde bancos NoSQL não são adequados.",
            "resposta": "Sistema de cartões de crédito porque são grandes e genéricos."
        }, {
            "num": 31,
            "pergunta": "Seja um exemplo de documento da collection username do curso {_id: \"fmasanori\", password: \"abacate\"}. Seguindo a lógica do exemplo, insira um usuário genérico \"username\", com senha \"1234\".",
            "resposta": "db.collection.insertOne({_id: 'username', password: '1234'});"
        }, {
            "num": 32,
            "pergunta": "Seja a collection username, de acordo com o documento exemplo. Execute uma busca de todos os usuários em ordem crescente de username, sem mostrar o campo \"password\".",
            "resposta": "db.collection.aggregate([{$sort: {_id: 1}}, {$project: {_id: 1}}]);"
        }, {
            "num": 33,
            "pergunta": "MovieDetails é uma collection que tem os campos: \"title\", \"year\", \"rated\" e \"award\" com subcampo \"wins\" e uma lista \"countries\". Mostre o título do filme do ano 2013, PG-13, que não ganhou prêmios.",
            "resposta": "db.movieDetails.find({year: 2013,\"awards.wins\": {$eq: 0}, rated: \"PG-13\"}, {_id: 0, title: 1,rated: 1,year: 1,\"awards.wins\": 1});"
        }, {
            "num": 34,
            "pergunta": "Na collection MovieDetais quantos filmes mostram Sweeden na segunda posição (índice 1) na lista \"countries\".",
            "resposta": "db.movieDetails.find({\"countries.1\": \"Sweeden\"})"
        }
    ]
}